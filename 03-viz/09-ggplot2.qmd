---
title: "09_ggplot2"

format:
  html: default
  revealjs:
    output-file: 09_ggplot2-reveal.html
  # pdf:
  #   number-sections: true
  #   colorlinks: true
---

# `ggplot2` {background-color="#e4282e"}

## Agenda

- `ggplot2`
  - aesthetics
  - small multiples
  - geoms

## Setup

```{r}
library(palmerpenguins)
library(tidyverse)
```

```{r, include=FALSE}
library(DT)
```

## ggplot2 $\in$ tidyverse

::: columns
::: {.column width="20%"}
```{r echo=FALSE, out.width="80%"}
knitr::include_graphics("images/ggplot2-part-of-tidyverse.png")
```
:::

::: {.column width="80%"}
-   **ggplot2** is the `tidyverse` data visualization package
-   Structure of the code for plots can be summarized as

```{r eval = FALSE}
ggplot(data = [dataset], 
       mapping = aes(x = [x-variable], 
                     y = [y-variable])) +
   geom_{shape}() +
   other options
```
:::
:::

## Data: Palmer Penguins

Measurements for penguin species, island in Palmer Archipelago, size (flipper length, body mass, bill dimensions), and sex.

```{r echo=FALSE, out.width="80%"}
knitr::include_graphics("images/penguins.png")
```


::: aside
Artwork by [\@allison_horst](https://github.com/allisonhorst/stats-illustrations/) <a href="https://twitter.com/allison_horst" title="allison_horst"><i class="fa fa-twitter"></i></a>
:::

## The Data {.smaller}

```{r message=FALSE}
penguins |>
  datatable()
```

## A Plot

```{r penguins}
#| output-location: column
ggplot(data = penguins, 
       mapping = aes(x = bill_depth_mm, y = bill_length_mm,
                     color = species)) +
  geom_point() +
  labs(title = "Bill depth and length",
       subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
       x = "Bill depth (mm)", y = "Bill length (mm)",
       color = "Species") +
  scale_color_viridis_d()

```

## Coding out loud

> **Start with the `penguins` data frame**

```{r penguins-0, warning = FALSE}
#| output-location: column

ggplot(data = penguins) 
```

##  Coding out loud {.smaller}

> Start with the `penguins` data frame, **map bill depth to the x-axis**

```{r penguins-1}
#| output-location: column
ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm))
```

##  Coding out loud {.smaller}

> Start with the `penguins` data frame, map bill depth to the x-axis **and map bill length to the y-axis.**

```{r penguins-2}
#| output-location: column
#| code-line-numbers: "2-3"
ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm)) 
```

##  Coding out loud {.smaller}

> Start with the `penguins` data frame, map bill depth to the x-axis and map bill length to the y-axis. **Represent each observation with a point**

```{r penguins-3, warning = FALSE}
#| output-location: column
#| code-line-numbers: "4"

ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm)) + 
  geom_point() 
```

##  Coding out loud {.smaller}

> Start with the `penguins` data frame, map bill depth to the x-axis and map bill length to the y-axis. Represent each observation with a point **and map species to the color of each point.**

```{r penguins-4, warning = FALSE}
#| output-location: column
#| code-line-numbers: "4"
ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     color = species)) + 
  geom_point()
```

##  Coding out loud {.smaller}

> Start with the `penguins` data frame, map bill depth to the x-axis and map bill length to the y-axis. Represent each observation with a point and map species to the color of each point. **Title the plot "Bill depth and length"**

```{r penguins-5, warning = FALSE}
#| output-location: column
#| code-line-numbers: "6"

ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     color = species)) +
  geom_point() +
  labs(title = "Bill depth and length") 
```

##  Coding out loud {.smaller}

> Start with the `penguins` data frame, map bill depth to the x-axis and map bill length to the y-axis. Represent each observation with a point and map species to the color of each point. Title the plot "Bill depth and length", **add the subtitle "Dimensions for Adelie, Chinstrap, and Gentoo Penguins"**

```{r penguins-6, warning = FALSE}
#| output-location: column
#| code-line-numbers: "7"

ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     color = species)) +
  geom_point() +
  labs(title = "Bill depth and length",
       subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins") 
```

##  Coding out loud {.smaller}

> Start with the `penguins` data frame, map bill depth to the x-axis and map bill length to the y-axis. Represent each observation with a point and map species to the color of each point. Title the plot "Bill depth and length", add the subtitle "Dimensions for Adelie, Chinstrap, and Gentoo Penguins", **label the x and y axes as "Bill depth (mm)" and "Bill length (mm)", respectively**

```{r penguins-7, warning = FALSE}
#| output-location: column
#| code-line-numbers: "8"

ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     color = species)) +
  geom_point() +
  labs(title = "Bill depth and length",
       subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
       x = "Bill depth (mm)", y = "Bill length (mm)") 
```

##  Coding out loud {.smaller}

> Start with the `penguins` data frame, map bill depth to the x-axis and map bill length to the y-axis. Represent each observation with a point and map species to the color of each point. Title the plot "Bill depth and length", add the subtitle "Dimensions for Adelie, Chinstrap, and Gentoo Penguins", label the x and y axes as "Bill depth (mm)" and "Bill length (mm)", respectively, **label the legend "Species"**

```{r penguins-8, warning = FALSE}
#| output-location: column
#| code-line-numbers: "9"

ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     color = species)) +
  geom_point() +
  labs(title = "Bill depth and length",
       subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
       x = "Bill depth (mm)", y = "Bill length (mm)",
       color = "Species") 
```

##  Coding out loud {.smaller}

> Start with the `penguins` data frame, map bill depth to the x-axis and map bill length to the y-axis. Represent each observation with a point and map species to the color of each point. Title the plot "Bill depth and length", add the subtitle "Dimensions for Adelie, Chinstrap, and Gentoo Penguins", label the x and y axes as "Bill depth (mm)" and "Bill length (mm)", respectively, label the legend "Species", **and add a caption for the data source.**

```{r penguins-9, warning = FALSE}
#| output-location: column
#| code-line-numbers: "10"

ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     color = species)) +
  geom_point() +
  labs(title = "Bill depth and length",
       subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
       x = "Bill depth (mm)", y = "Bill length (mm)",
       color = "Species",
       caption = "Source: Palmer Station LTER / palmerpenguins package") 
```

##  Coding out loud {.smaller}

> Start with the `penguins` data frame, map bill depth to the x-axis and map bill length to the y-axis. Represent each observation with a point and map species to the color of each point. Title the plot "Bill depth and length", add the subtitle "Dimensions for Adelie, Chinstrap, and Gentoo Penguins", label the x and y axes as "Bill depth (mm)" and "Bill length (mm)", respectively, label the legend "Species", and add a caption for the data source. **Finally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness.**

```{r penguins-10, warning = FALSE}
#| output-location: column
#| code-line-numbers: "11"

ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     color = species)) +
  geom_point() +
  labs(title = "Bill depth and length",
       subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
       x = "Bill depth (mm)", y = "Bill length (mm)",
       color = "Species",
       caption = "Source: Palmer Station LTER / palmerpenguins package") +
  scale_color_viridis_d() 
```

## Coding out loud {.smaller}

::: panel-tabset
### Code

```{r penguins-10-nohighlight, fig.show = "hide"}

ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     color = species)) +
  geom_point() +
  labs(title = "Bill depth and length",
       subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
       x = "Bill depth (mm)", y = "Bill length (mm)",
       color = "Species",
       caption = "Source: Palmer Station LTER / palmerpenguins package") +
  scale_color_viridis_d()
```

### Plot

```{r ref.label="penguins-10-nohighlight", echo = FALSE, warning = FALSE, out.width = "90%", fig.width = 8}
```

### Narrative

Start with the `penguins` data frame, map bill depth to the x-axis and map bill length to the y-axis.

Represent each observation with a point and map species to the color of each point.

Title the plot "Bill depth and length", add the subtitle "Dimensions for Adelie, Chinstrap, and Gentoo Penguins", label the x and y axes as "Bill depth (mm)" and "Bill length (mm)", respectively, label the legend "Species", and add a caption for the data source.

Finally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness.
:::

## Argument names

::: callout-tip
You can omit the names of first two arguments when building plots with `ggplot()`.
:::

::: columns
::: {.column width="50%"}
```{r named-args, eval = FALSE}
#| code-line-numbers: "1-2"

ggplot(data = penguins, 
       mapping = aes(x = bill_depth_mm,  
                     y = bill_length_mm,
                     color = species)) +
  geom_point() +
  scale_color_viridis_d()
```
:::

::: {.column width="50%"}
```{r not-named-args, eval = FALSE}
#| code-line-numbers: "1-2"
ggplot(penguins, 
       aes(x = bill_depth_mm, 
           y = bill_length_mm,
           color = species)) +
  geom_point() +
  scale_color_viridis_d()
```
:::
:::

## Practice

Generate a basic plot in `ggplot2` using different variables than those in the last example (last example: `bill_depth_mm` & `bill_depth_mm`).

::: aside
Unmute to ask or put any questions in the chat. When completed, respond to the zoom poll.
:::

# Aesthetics {background-color="#e4282e"}

## Aesthetics options

Commonly used characteristics of plotting characters that can be **mapped to a specific variable** in the data are

-   `color`
-   `shape`
-   `size`
-   `alpha` (transparency)

## Color

```{r color, warning = FALSE}
#| output-location: column
#| code-line-numbers: "4"
ggplot(penguins,
       aes(x = bill_depth_mm, 
           y = bill_length_mm,
           color = species)) + 
  geom_point() +
  scale_color_viridis_d()
```

## Shape

Mapped to a different variable than `color`

```{r shape-island, warning = FALSE}
#| output-location: column
#| code-line-numbers: "5"
ggplot(penguins,
       aes(x = bill_depth_mm, 
           y = bill_length_mm,
           color = species,
           shape = island)) + 
  geom_point() +
  scale_color_viridis_d()
```

## Shape

Mapped to same variable as `color`

```{r shape-species, warning = FALSE}
#| output-location: column
#| code-line-numbers: "4-5"
ggplot(penguins,
       aes(x = bill_depth_mm, 
           y = bill_length_mm,
           color = species,
           shape = species)) + 
  geom_point() +
  scale_color_viridis_d()
```

## Size

```{r size, warning = FALSE}
#| output-location: column
#| code-line-numbers: "6"
ggplot(penguins,
       aes(x = bill_depth_mm, 
           y = bill_length_mm,
           color = species,
           shape = species,
           size = body_mass_g)) + 
  geom_point() +
  scale_color_viridis_d()
```

## Alpha

```{r alpha, warning = FALSE}
#| output-location: column
#| code-line-numbers: "7"
ggplot(penguins,
       aes(x = bill_depth_mm, 
           y = bill_length_mm,
           color = species,
           shape = species,
           size = body_mass_g,
           alpha = flipper_length_mm)) + 
  geom_point() +
  scale_color_viridis_d()
```

## Mapping vs. setting

-   **Mapping:** Determine the size, alpha, etc. of points based on the values of a variable in the data
    -   goes into `aes()`
-   **Setting:** Determine the size, alpha, etc. of points **not** based on the values of a variable in the data
    -   goes into `geom_*()` (this was `geom_point()` in the previous example, but we'll learn about other geoms soon!)

## Mapping vs. Setting (example)

::: columns
::: {.column width="50%"}
**Mapping**

```{r warning = FALSE, out.width = "100%"}
#| code-line-numbers: "4-5"
ggplot(penguins,
       aes(x = bill_depth_mm,
           y = bill_length_mm,
           size = body_mass_g, 
           alpha = flipper_length_mm)) + 
  geom_point()
```
:::

::: {.column width="50%"}
**Setting**

```{r warning = FALSE, out.width = "100%"}
#| code-line-numbers: "4"
ggplot(penguins,
       aes(x = bill_depth_mm,
           y = bill_length_mm)) + 
  geom_point(size = 2, alpha = 0.5) 
```
:::
:::

## Your Turn

Edit the basic plot you created earlier to change its aesthetics.

::: aside
Unmute to ask or put any questions in the chat. When completed, respond to the zoom poll.
:::

# Faceting {background-color="#e4282e"}

## Faceting

-   Smaller plots that display different subsets of the data
-   Useful for exploring conditional relationships and large data

. . .

```{r facet-basic}
#| output-location: column
#| code-line-numbers: "3"
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + 
  geom_point() +
  facet_grid(species ~ island) 
```

. . . 

```{r warning = FALSE}
#| output-location: column
#| code-line-numbers: "3"
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + 
  geom_point() +
  facet_wrap(~ species, ncol = 2) 
```

## Faceting summary

-   `facet_grid()`:
    -   2d grid
    -   `rows ~ cols`
    -   use `.` for no split
-   `facet_wrap()`: 1d ribbon wrapped according to number of rows and columns specified or available plotting area

## Facet and color

```{r facet-color-legend, warning = FALSE}
#| output-location: column
#| code-line-numbers: "5,8"
ggplot(
  penguins, 
  aes(x = bill_depth_mm, 
      y = bill_length_mm, 
      color = species)) + 
  geom_point() +
  facet_grid(species ~ sex) +
  scale_color_viridis_d() 
```

## Face and color, no legend

```{r facet-color-no-legend, warning = FALSE}
#| output-location: column
#| code-line-numbers: "9"

ggplot(
  penguins, 
  aes(x = bill_depth_mm, 
      y = bill_length_mm, 
      color = species)) +
  geom_point() +
  facet_grid(species ~ sex) +
  scale_color_viridis_d() +
  guides(color = FALSE) 
```

# `geom`s {background-color="#e4282e"}

## Common `geom`s

| `geom` [^1]      | Description [^2] |
|------------------|------------------|
| `geom_point`     | scatterplot      |
| `geom_bar`       | barplot          |
| `geom_line`      | line plot        |
| `geom_density`   | densityplot      |
| `geom_histogram` | histogram        |
| `geom_boxplot`   | boxplot          |

[^1]: `ggplot2` geoms listed [here](https://ggplot2.tidyverse.org/reference/)

[^2]: When each visualization is appropriate [here](https://www.data-to-viz.com/)


## Which plot to use? 

[Data to Viz](https://www.data-to-viz.com/)

- includes which plot to consider given type of data
- also includes R and Python example code for generating that plot type

## Practice

1.  Make a scatterplot (`geom_point`) with `bill_depth_mm` on the y-axis and `bill_length_mm` on the x-axis.
2. Try to make a scatterplot of `species` vs. `bill_depth_mm`. Is there a better choice of geom?
3. What does the bins argument in geom_histogram() do?
4. Customize as much as possible on of the plots generated before time is "up"

::: aside
Unmute to ask or put any questions in the chat. When completed, respond to the zoom poll.
:::



# Customizing

## Data

In September 2019, YouGov survey asked 1,639 GB adults the following question:

::: columns
::: {.column width="50%"}
> In hindsight, do you think Britain was right/wrong to vote to leave EU?
>
> -   Right to leave\
> -   Wrong to leave\
> -   Don't know
:::

::: {.column width="50%"}
```{r echo = FALSE}
brexit <- tibble(
  opinion = c(
    rep("Right", 664), rep("Wrong", 787), rep("Don't know", 188)
  ),
  region = c(
    rep("london", 63), rep("rest_of_south", 241), rep("midlands_wales", 145), rep("north", 176), rep("scot", 39),
    rep("london", 110), rep("rest_of_south", 257), rep("midlands_wales", 152), rep("north", 176), rep("scot", 92),
    rep("london", 24), rep("rest_of_south", 49), rep("midlands_wales", 57), rep("north", 48), rep("scot", 10)
  )
)
```

```{r echo = FALSE, out.width="100%"}
ggplot(brexit, aes(x = opinion)) +
  geom_bar()
```
:::
:::

::: aside
Source: [YouGov Survey Results](https://d25d2506sfb94s.cloudfront.net/cumulus_uploads/document/x0msmggx08/YouGov%20-%20Brexit%20and%202019%20election.pdf), retrieved Oct 7, 2019
:::

## The Data: Code

```{r, eval=FALSE}
brexit <- tibble(
  opinion = c(
    rep("Right", 664), rep("Wrong", 787), rep("Don't know", 188)
  ),
  region = c(
    rep("london", 63), rep("rest_of_south", 241), rep("midlands_wales", 145), rep("north", 176), rep("scot", 39),
    rep("london", 110), rep("rest_of_south", 257), rep("midlands_wales", 152), rep("north", 176), rep("scot", 92),
    rep("london", 24), rep("rest_of_south", 49), rep("midlands_wales", 57), rep("north", 48), rep("scot", 10)
  )
)
```


## Order by frequency

- default alphabetical typically not ideal
- `fct_infreq`: Reorder factors' levels by frequency

```{r infreq}
#| output-location: column
#| code-line-numbers: "1"
ggplot(brexit, aes(x = fct_infreq(opinion))) + 
  geom_bar()
```

## Clean up labels

```{r labels}
#| output-location: column
#| code-line-numbers: "3-6"

ggplot(brexit, aes(x = opinion)) +
  geom_bar() +
  labs( 
    x = "Opinion", 
    y = "Count" 
  ) 
```


## Use inherent level order

`fct_relevel`: Reorder factor levels using a custom order

```{r relevel}
#| output-location: column
# fix order
brexit <- brexit |>
  mutate(
    region = fct_relevel( 
      region,
      "london", "rest_of_south", "midlands_wales", "north", "scot"
    )
  )

# plot
ggplot(brexit, aes(x = region)) +
  geom_bar()
```

## Clean up Labels

`fct_recode`: Change factor levels by hand

```{r recode}
#| output-location: column
#| code-line-numbers: "3-10"

brexit <- brexit |>
  mutate(
    region = fct_recode( 
      region,
      London = "london",
      `Rest of South` = "rest_of_south",
      `Midlands / Wales` = "midlands_wales",
      North = "north",
      Scotland = "scot"
    )
  )

ggplot(brexit, aes(x = region)) +
  geom_bar()
```

## Put long categories on the y-axis

- Long categories can be hard to read
- Move them to the y-axis

```{r flip}
#| output-location: column
#| code-line-numbers: "1"

ggplot(brexit, aes(y = region)) + 
  geom_bar()
```

## And reverse the order of levels

`fct_rev`: Reverse order of factor levels

```{r rev}
#| output-location: column
#| code-line-numbers: "1"

ggplot(brexit, aes(y = fct_rev(region))) + 
  geom_bar()
```


## Clean up labels


```{r labels-again}
#| output-location: column
#| code-line-numbers: "3-6"

ggplot(brexit, aes(y = fct_rev(region))) +
  geom_bar() +
  labs( 
    x = "Count", 
    y = element_blank()
  ) 
```

## Pick a purpose

...Segmented bar plots can be hard to read

```{r segment}
#| output-location: column
#| code-line-numbers: "1"

ggplot(brexit, aes(y = region, fill = opinion)) + 
  geom_bar()
```


## Use facets

```{r facet}
#| output-location: column
#| code-line-numbers: "3"

ggplot(brexit, aes(y = opinion, fill = region)) +
  geom_bar() +
  facet_wrap(~region, nrow = 1) 
```


## Be selective with redundancy

```{r hide-legend}
#| output-location: column
#| code-line-numbers: "4"

ggplot(brexit, aes(y = opinion, fill = opinion)) +
  geom_bar() +
  facet_wrap(~region, nrow = 1) +
  guides(fill = "none") 
```

## Use informative labels

```{r informative-label}
#| output-location: column
#| code-line-numbers: "6"

ggplot(brexit, aes(y = opinion, fill = opinion)) +
  geom_bar() +
  facet_wrap(~region, nrow = 1) +
  guides(fill = "none") +
  labs(
    title = "Was Britain right/wrong to vote to leave EU?", 
    x = NULL, y = NULL
  )
```


## A bit more info

```{r more-info}
#| output-location: column
#| code-line-numbers: "7-8"

ggplot(brexit, aes(y = opinion, fill = opinion)) +
  geom_bar() +
  facet_wrap(~region, nrow = 1) +
  guides(fill = "none") +
  labs(
    title = "Was Britain right/wrong to vote to leave EU?",
    subtitle = "YouGov Survey Results, 2-3 September 2019", 
    caption = "Source: https://d25d2506sfb94s.cloudfront.net/cumulus_uploads/document/x0msmggx08/YouGov%20-%20Brexit%20and%202019%20election.pdf", 
    x = NULL, y = NULL
  )
```

## Let's do better


```{r short-link}
#| output-location: column
#| code-line-numbers: "8"

ggplot(brexit, aes(y = opinion, fill = opinion)) +
  geom_bar() +
  facet_wrap(~region, nrow = 1) +
  guides(fill = "none") +
  labs(
    title = "Was Britain right/wrong to vote to leave EU?",
    subtitle = "YouGov Survey Results, 2-3 September 2019",
    caption = "Source: bit.ly/2lCJZVg", 
    x = NULL, y = NULL
  )
```

## Fix up facet labels

```{r label-wrap}
#| output-location: column
#| code-line-numbers: "5"

ggplot(brexit, aes(y = opinion, fill = opinion)) +
  geom_bar() +
  facet_wrap(~region,
    nrow = 1,
    labeller = label_wrap_gen(width = 12) 
  ) + 
  guides(fill = "none") +
  labs(
    title = "Was Britain right/wrong to vote to leave EU?",
    subtitle = "YouGov Survey Results, 2-3 September 2019",
    caption = "Source: bit.ly/2lCJZVg",
    x = NULL, y = NULL
  )
```

## Select meaningful colors 

- Rainbow colors not always best
- Manually choose colors when needed

```{r red-green}
#| output-location: column
#| code-line-numbers: "9-13"

ggplot(brexit, aes(y = opinion, fill = opinion)) +
  geom_bar() +
  facet_wrap(~region, nrow = 1, labeller = label_wrap_gen(width = 12)) +
  guides(fill = "none") +
  labs(title = "Was Britain right/wrong to vote to leave EU?",
       subtitle = "YouGov Survey Results, 2-3 September 2019",
       caption = "Source: bit.ly/2lCJZVg",
       x = NULL, y = NULL) +
  scale_fill_manual(values = c( 
    "Wrong" = "red", 
    "Right" = "green", 
    "Don't know" = "gray" 
  )) 
```


## Choosing better colors

[colorbrewer2.org](https://colorbrewer2.org/)

```{r echo = FALSE, out.width = "60%"}
knitr::include_graphics("images/color-brewer.png")
```

## Use better colors

```{r color-brewer}
#| output-location: column
#| code-line-numbers: "9-13"

ggplot(brexit, aes(y = opinion, fill = opinion)) +
  geom_bar() +
  facet_wrap(~region, nrow = 1, labeller = label_wrap_gen(width = 12)) +
  guides(fill = "none") +
  labs(title = "Was Britain right/wrong to vote to leave EU?",
       subtitle = "YouGov Survey Results, 2-3 September 2019",
       caption = "Source: bit.ly/2lCJZVg",
       x = NULL, y = NULL) +
  scale_fill_manual(values = c(
    "Wrong" = "#ef8a62", 
    "Right" = "#67a9cf", 
    "Don't know" = "gray" 
  ))
```

## Select theme

```{r theme}
#| output-location: column
#| code-line-numbers: "12"

ggplot(brexit, aes(y = opinion, fill = opinion)) +
  geom_bar() +
  facet_wrap(~region, nrow = 1, labeller = label_wrap_gen(width = 12)) +
  guides(fill = "none") +
  labs(title = "Was Britain right/wrong to vote to leave EU?",
       subtitle = "YouGov Survey Results, 2-3 September 2019",
       caption = "Source: bit.ly/2lCJZVg",
       x = NULL, y = NULL) +
  scale_fill_manual(values = c("Wrong" = "#ef8a62",
                               "Right" = "#67a9cf",
                               "Don't know" = "gray")) +
  theme_minimal() 
```

::: aside
`ggthemes` described [here](https://ggplot2.tidyverse.org/reference/ggtheme.html)
:::

## Customize theme

```{r theme-custom}
#| output-location: column
#| code-line-numbers: "12-14"

ggplot(brexit, aes(y = opinion, fill = opinion)) +
  geom_bar() +
  facet_wrap(~region, nrow = 1, labeller = label_wrap_gen(width = 12)) +
  guides(fill = "none") +
  labs(title = "Was Britain right/wrong to vote to leave EU?",
       subtitle = "YouGov Survey Results, 2-3 September 2019",
       caption = "Source: bit.ly/2lCJZVg",
       x = NULL, y = NULL) +
  scale_fill_manual(values = c("Wrong" = "#ef8a62",
                               "Right" = "#67a9cf",
                               "Don't know" = "gray")) +
  theme_minimal(base_size = 16) + 
  theme(plot.title.position = "plot", 
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank()) 
```

## Add direct labels

```{r direct-labels}
#| output-location: column
#| code-line-numbers: "3-5"

ggplot(brexit, aes(y = opinion, fill = opinion)) +
  geom_bar() +
  geom_text(stat = 'count', 
            aes(label = after_stat(count)), 
            vjust = -0.5, hjust = 1.1, size=3) +
  facet_wrap(~region, nrow = 1, labeller = label_wrap_gen(width = 12)) +
  guides(fill = "none") +
  labs(title = "Was Britain right/wrong to vote to leave EU?",
       subtitle = "YouGov Survey Results, 2-3 September 2019",
       caption = "Source: bit.ly/2lCJZVg",
       x = NULL, y = NULL) +
  scale_fill_manual(values = c("Wrong" = "#ef8a62",
                               "Right" = "#67a9cf",
                               "Don't know" = "gray")) +
  theme_minimal(base_size = 16) + 
  theme(plot.title.position = "plot", 
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        axis.text.x = element_blank()) 
```

## ChatGPT for plotting and customization

"If I had a dataset of individual opinions in a column and the region from where each person came and I wanted to create a bar plot using ggplot2 that showed how many people said right, wrong, or don't know by region using small multiples, ensuring the wrong group was orange, right group was blue, and don't know was gray and that the background were white with no gridlines, what would I do?"

. . . 

```{r, eval=FALSE}
ggplot(summary_data, aes(x = region, y = count, fill = opinion)) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_fill_manual(values = c("Wrong" = "orange", "Right" = "blue", "Don't know" = "gray")) +
  theme(
    panel.background = element_rect(fill = "white"),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  )
```

. . . 

Editing this a bit...

```{r}
ggplot(brexit, aes(x = region, fill = opinion)) +
  geom_bar(position = "dodge") +
  scale_fill_manual(values = c("Wrong" = "orange", "Right" = "blue", "Don't know" = "gray")) +
  theme(
    panel.background = element_rect(fill = "white"),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  )
```

## Practice

Customize a plot from earlier further, considering color, theme, order, labels, etc.

::: aside
Unmute to ask or put any questions in the chat. When completed, respond to the zoom poll.
:::

